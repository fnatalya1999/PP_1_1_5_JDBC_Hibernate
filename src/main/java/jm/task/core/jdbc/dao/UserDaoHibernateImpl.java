package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.util.ArrayList;
import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    public UserDaoHibernateImpl() {

    }

    @Override
    public void createUsersTable() {
        try (Session session = Util.getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            String sql = "CREATE TABLE IF NOT EXISTS users\n" +
                    "(\n" +
                    "    id       int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ,\n" +
                    "    name     VARCHAR(45) NOT NULL,\n" +
                    "    lastname VARCHAR(45) NOT NULL,\n" +
                    "    age      SMALLINT    NOT NULL\n" +
                    "    )";
            session.createSQLQuery(sql).executeUpdate();
            transaction.commit();
            System.out.println("Таблица 'users' создана (если её не было)");
        } catch (Exception e) {
            System.out.println("Ошибка при создании таблицы: " + e.getMessage());
        }
    }


    @Override
    public void dropUsersTable() {
        try (Session session = Util.getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            session.createSQLQuery("DROP TABLE IF EXISTS users").executeUpdate();
            transaction.commit();
            System.out.println("Таблица 'users' удалена (если существовала ).");
        } catch (Exception e) {
            System.out.println("Ошибка при удалении таблицы: " + e.getMessage());
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        try (Session session = Util.getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            User user = new User(name, lastName, age);
            session.save(user);
            transaction.commit();
            System.out.println("Пользователь " + name + " " + lastName + " (возраст: " + age + ") добавлен в базу данных.");
        } catch (Exception e) {
            System.out.println("Ошибка при добавлении пользователя " + name + " " + lastName + ": " + e.getMessage());
        }
    }

    @Override
    public void removeUserById(long id) {
        try (Session session = Util.getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            User user = session.get(User.class, id);
            if (user != null) {
                session.delete(user);
                transaction.commit();
                System.out.println("Пользователь с ID " + id + "успешно удалён.");
            } else {
                System.out.println("Пользователь с ID " + id + "не найден.");
            }
        } catch (Exception e) {
            System.out.println("Ошибка при удалении пользователя с ID " + id + ": " + e.getMessage());
        }
    }

    @Override
    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        try (Session session = Util.getSessionFactory().openSession()) {
            users = session.createQuery("FROM User", User.class).list();
            if (users.isEmpty()) {
                System.out.println("Список пользователей пуст.");
            } else {
                System.out.println("Список пользователей:");
                for (User user : users) {
                    System.out.println(user.getLastName() + " " + user.getAge() + " " + user.getName());
                }
            }
        } catch (Exception e) {
            System.out.println("Ошибка при получении списка пользователей: " + e.getMessage());
        }
        return users;
    }


    @Override
    public void cleanUsersTable() {
        try (Session session = Util.getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();
            session.createSQLQuery("delete from users").executeUpdate();
            transaction.commit();
            System.out.println("Таблица пользователей успешно очищена.");
        } catch (Exception e) {
            System.out.println("Ошибка при очистке таблицы пользователей " + e.getMessage());
        }
    }
}
